respecc {
  Program      = br* greeting? br* Statement (br+ Statement)* br* farewell? br*
  Statement    = Declaration
               | FuncCall
               | Conditional
               | Loop
               | Assignment
  Conditional  = "if" "(" Exp ")" Block br*
                 ("else" "if" "(" Exp ")" Block)* br*
                 ("else" Block)?                                -- if_impolite
               | "Excuse me, if " Exp "," Block br*
                 ("Otherwise, if " Exp "," Block)* br*
                 ("Otherwise," Block)?                          -- if_polite
  Loop         = "while" "(" Exp ")" Block                      -- while_impolite
               | "for"  "(" (Type? id "=" Exp)? ";" Exp?
                 ";" Assignment? ")" Block                      -- for_impolite
               | "Excuse me, while " Exp "," Block              -- while_polite
  FuncCall     = id Params
  Assignment   = Var "=" Exp                                     -- impolite
               | Increment
               | "Please populate " Var "with " Exp "."          -- polite

  Declaration  = VarDec | FunDec// | TypeDec
  Type         =  Type "[" "]"                                  -- array
               |  primtype
               |  id
  //             | ArrayType
  //             | RecordType
  //ArrayType    = "array" "of" typeId
  //Field        = id (":" typeId)?
  //RecordType   = "{" ListOf<Field, ","> "}"
  FunDec       = "Objective:" id Params (":" Type)? Block
  VarDec       = "Please declare " id
                 ("as a " Type)? ("as " Exp)? "."                -- polite
               | "gimme" id (":" Type)? "=" Exp                  -- impolite
  Params       = "(" ListOf<Param, ","> ")"
  Param        = id (":" Type)?
  Block        =  "could you..." br* (Statement br+)*
                  "Thank You."                                   -- polite
               |  "{" br* (Statement br+)* "}"                   -- impolite
              //Lambda or ? :
  Exp          =  Exp orop Exp1                                  -- binary
               |  Exp1
  Exp1         =  Exp1 andop Exp2                                -- binary
               |  Exp2
  Exp2         =  Exp3 relop Exp3                                -- binary
               |  Exp3
  Exp3         =  Exp3 addop Exp4                                -- binary
               |  Exp4
  Exp4         =  Exp4 mulop Exp5                                -- binary
               |  Exp5
  Exp5         =  prefixop Exp7                                  -- prefix
               |  Exp6
  Exp6         =  Exp7 expoop Exp6                               -- binary
               |  "-" Exp7                                       -- negate
               |  Exp7
  Exp7         =  Literal
               |  FuncCall
               |  Var
               |  "(" Exp ")"                                   -- parens
  Increment    =  incop Var                                     -- prefix
               |  Var incop                                     -- postfix
  Var          =  Var "[" Exp "]"                               -- subscript
               |  Var "." id                                    -- select
               |  id
  Literal      = intlit
               | stringlit
               | boollit
//               | "NULL"
  keyword      =  ("Boolean" | "if" | "break" | "else" | "int"
               |  "for" | "and" | "return" | "Number" | "plus"
               |  "null" | "while" | "true" | "String"
               |  "or" | "Yes" | "No" | "minus" | "times" | "not"
               |  "print" | "Objective") ~idrest
  id           = ~keyword letter idrest*
  idrest       = letter | digit | "_"
  boollit      = "Yes" | "No"
  intlit       = digit+
  stringlit    = "\"" char* "\"" | "\'" char* "\'"
  char         = ~"\\" ~"\"" ~"\n" any | escape
  escape       = "\\" ("\\" | "\"" | "n" | "t" | codepoint)
  codepoint    = "u{" hexDigit+ "}"
  andop        = "&&" | "and"
  orop         = "||" | "or"
  mulop        = "*" | "/" | "%" | "times" | "divided by" | "modded with"
  addop        = "+" | "-" | "plus" | "minus"
  expoop       = "**" | "raised to the power of"
  relop        = "<=" | "<" | ">=" | ">" | "==" | "!="  | "is less than or equal to"
               | "is greater than or equal to" | "is less than" | "is greater than"
               | "is equal to" | "is not equal to"
  incop        =  "++" | "--"
  prefixop     =  ~"--" "-" | "!" | "not"
  primtype     =  "Boolean" | "Number" | "String"
  space        := comment | " " | "\t"
  comment      = "/*" (~"*/" any)* "*/"
  br           =  ";" | "\n"
  greeting     = ("Hello!" | "Hey!" | "Hi There!" | "Salutations!")
  farewell     = ("Bye Bye!" | "Farewell!")
}
